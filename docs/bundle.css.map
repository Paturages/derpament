{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\MapCard.svelte",
    "..\\PlayerRow.svelte",
    "..\\QualifiersRow.svelte",
    "..\\RollRow.svelte",
    "..\\ScoreRow.svelte",
    "..\\StageRow.svelte",
    "..\\TournamentRow.svelte",
    "..\\Header.svelte",
    "..\\PlayerList.svelte",
    "..\\QualifiersList.svelte",
    "..\\RollList.svelte",
    "..\\ScoreList.svelte",
    "..\\Stage.svelte",
    "..\\Tournament.svelte",
    "..\\Tournaments.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  export let title;\r\n  export let artist;\r\n  export let mapper;\r\n  export let difficulty;\r\n  export let beatmapId;\r\n  export let beatmapSetId;\r\n  export let hp;\r\n  export let od;\r\n  export let category;\r\n  export let counts;\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <div class=\"title\">\r\n    <a href={`https://osu.ppy.sh/beatmapsets/${beatmapSetId}#mania/${beatmapId}`} target=\"_blank\">\r\n      <div class=\"artist\">{artist}</div>\r\n      <div class=\"name\" title={title}>{title}</div>\r\n    </a>\r\n    <div class=\"mapper\">\r\n      <b>[{difficulty}]</b><br />beatmap set by <b>{mapper}</b>\r\n    </div>\r\n    <div class=\"metrics\">\r\n      HP {hp}, OD {od}\r\n    </div>\r\n  </div>\r\n  <div class=\"category\">{category}</div>\r\n  <div class=\"counts\">\r\n    {counts.notes.total} notes<br />({counts.notes.rice} rice, {counts.notes.ln} LNs)<br />\r\n    {counts.bpm} BPM events<br />\r\n    {counts.sv} SV events<br />\r\n    {counts.notes.single} singles<br />\r\n    {counts.notes.jump} jumps<br />\r\n    {counts.notes.hand} hands<br />\r\n    {counts.notes.quad} quads\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .root {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    max-width: 800px;\r\n    border-bottom: 1px solid #eee;\r\n    position: relative;\r\n  }\r\n  .name {\r\n    font-weight: bold;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    max-width: 500px;\r\n  }\r\n  .metrics {\r\n    font-size: .8em;\r\n  }\r\n  .title {\r\n    flex: 1;\r\n  }\r\n  .category {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    text-transform: uppercase;\r\n  }\r\n  .counts {\r\n    font-size: .9em;\r\n    margin-left: 1em;\r\n    text-align: right;\r\n  }\r\n  @media (max-width: 600px) {\r\n    .category {\r\n      position: initial;\r\n    }\r\n    .counts {\r\n      display: none;\r\n    }\r\n  }\r\n</style>",
    "<script>\r\n  export let id;\r\n  export let name;\r\n  export let avatar;\r\n  export let country;\r\n  export let pp;\r\n  export let rank;\r\n  export let countryRank;\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <div class=\"avatar\">\r\n    <img src={avatar} alt=\"\" />\r\n  </div>\r\n  <div class=\"name\">\r\n    <a href={`https://osu.ppy.sh/users/${id}`} target=\"_blank\">\r\n      {name}\r\n    </a>\r\n  </div>\r\n  <div class=\"info\">\r\n    #{rank} ({pp} pp)<br />\r\n    {country} (#{countryRank})\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .root {\r\n    height: 4em;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    max-width: 800px;\r\n    border-bottom: 1px solid #eee;\r\n  }\r\n  .avatar {\r\n    width: 3.5em;\r\n    height: 3.5em;\r\n    margin-right: 1em;\r\n  }\r\n  .avatar img {\r\n    border-radius: 50%;\r\n  }\r\n  .name {\r\n    font-size: 1.5em;\r\n    flex: 1;\r\n  }\r\n  .info {\r\n    margin-left: 1em;\r\n    text-align: right;\r\n  }\r\n</style>",
    "<script>\r\n  export let player;\r\n  export let totalRank;\r\n  export let ranks;\r\n  export let totalScore;\r\n  export let index;\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <div class=\"name\">\r\n    {index}.\r\n    <a href={`https://osu.ppy.sh/users/${player.id}`} target=\"_blank\">\r\n      {player.name}\r\n    </a>\r\n  </div>\r\n  <div class=\"info\">\r\n    <div class=\"combo\">Sum of scores: {totalScore}</div>\r\n    <div class=\"counts\">\r\n      Ranks: {ranks.join(', ')}\r\n    </div>\r\n  </div>\r\n  <div class=\"score\">{totalRank}</div>\r\n</div>\r\n\r\n<style>\r\n  .root {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    max-width: 800px;\r\n    border-bottom: 1px solid #eee;\r\n  }\r\n  .name {\r\n    font-size: 1.5em;\r\n    flex: 1;\r\n  }\r\n  .info {\r\n    margin-left: 1em;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n  }\r\n  .score {\r\n    width: 4.5em;\r\n    margin-left: 1em;\r\n    font-size: 1.5em;\r\n    text-align: right;\r\n  }\r\n  .counts {\r\n    font-size: .8em;\r\n  }\r\n\r\n  @media (max-width: 600px) {\r\n    .root {\r\n      flex-direction: column;\r\n    }\r\n    .info {\r\n      order: 2;\r\n      align-items: center;\r\n    }\r\n    .score {\r\n      order: 1;\r\n      text-align: center;\r\n    }\r\n  }\r\n</style>",
    "<script>\r\n  export let player;\r\n  export let roll;\r\n  export let index;\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <div class=\"name\">\r\n    {index}.\r\n    <a href={`https://osu.ppy.sh/users/${player.id}`} target=\"_blank\">\r\n      {player.name}\r\n    </a>\r\n  </div>\r\n  <div class=\"roll\">{roll}</div>\r\n</div>\r\n\r\n<style>\r\n  .root {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    max-width: 800px;\r\n    border-bottom: 1px solid #eee;\r\n  }\r\n  .name {\r\n    font-size: 1.5em;\r\n    flex: 1;\r\n  }\r\n  .roll {\r\n    width: 4em;\r\n    margin-left: 1em;\r\n    font-size: 1.5em;\r\n    text-align: right;\r\n  }\r\n</style>",
    "<script>\r\n  export let player;\r\n  export let score;\r\n  export let combo;\r\n  export let counts;\r\n  export let index;\r\n\r\n  const totalCount = counts.max + counts[300] + counts[200] + counts[100] + counts[50] + counts.miss;\r\n  const accuracy = (\r\n    (305 * counts.max) +\r\n    (300 * counts[300]) +\r\n    (200 * counts[200]) +\r\n    (100 * counts[100]) +\r\n    (50 * counts[50])\r\n  ) / (3.05 * totalCount);\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <div class=\"name\">\r\n    {index}.\r\n    <a href={`https://osu.ppy.sh/users/${player.id}`} target=\"_blank\">\r\n      {player.name}\r\n    </a>\r\n    <small>{player.country}</small>\r\n  </div>\r\n  <div class=\"info\">\r\n    <div class=\"combo\">{accuracy.toFixed(2)}%, {combo} combo</div>\r\n    <div class=\"counts\">\r\n      {counts.max} |\r\n      {counts[300]} |\r\n      {counts[200]} |\r\n      {counts[100]} |\r\n      {counts[50]} |\r\n      {counts.miss}\r\n    </div>\r\n  </div>\r\n  <div class=\"score\">{score.toLocaleString()}</div>\r\n</div>\r\n\r\n<style>\r\n  .root {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    max-width: 800px;\r\n    border-bottom: 1px solid #eee;\r\n  }\r\n  .name {\r\n    font-size: 1.5em;\r\n    flex: 1;\r\n  }\r\n  .name small {\r\n    font-size: .5em;\r\n  }\r\n  .info {\r\n    margin-left: 1em;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n  }\r\n  .score {\r\n    width: 4.5em;\r\n    margin-left: 1em;\r\n    font-size: 1.5em;\r\n    text-align: right;\r\n  }\r\n  .counts {\r\n    font-size: .8em;\r\n  }\r\n\r\n  @media (max-width: 600px) {\r\n    .root {\r\n      flex-direction: column;\r\n    }\r\n    .info {\r\n      order: 2;\r\n      align-items: center;\r\n    }\r\n    .score {\r\n      order: 1;\r\n      text-align: center;\r\n    }\r\n  }\r\n</style>",
    "<script>\r\n  export let name;\r\n  export let mapCount;\r\n  export let href;\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <div class=\"name\">\r\n    <a href={href}>\r\n      {name}\r\n    </a>\r\n  </div>\r\n  <div class=\"maps\">{mapCount}&nbsp;maps</div>\r\n</div>\r\n\r\n<style>\r\n  .root {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    max-width: 800px;\r\n    border-bottom: 1px solid #eee;\r\n  }\r\n  .name {\r\n    font-size: 1.5em;\r\n  }\r\n  .maps {\r\n    margin-left: 1em;\r\n  }\r\n</style>",
    "<script>\r\n  export let name;\r\n  export let id;\r\n  export let playersCount;\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <div class=\"name\">\r\n    <a href={`#/tournaments/${id}`}>\r\n      {name}\r\n    </a>\r\n  </div>\r\n  <div class=\"players\">{playersCount}&nbsp;players</div>\r\n</div>\r\n\r\n<style>\r\n  .root {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    max-width: 800px;\r\n    border-bottom: 1px solid #eee;\r\n  }\r\n  .name {\r\n    font-size: 1.5em;\r\n  }\r\n  .players {\r\n    margin-left: 1em;\r\n  }\r\n</style>",
    "<script>\r\n  import { createEventDispatcher } from 'svelte';\r\n\r\n  const dispatch = createEventDispatcher();\r\n\r\n  export let backHref;\r\n  export let initialValue = '';\r\n\r\n  let value = initialValue;\r\n  let timeout;\r\n  function handleSearch($event) {\r\n    // 500 ms debounce\r\n    if (timeout) clearTimeout(timeout);\r\n    timeout = setTimeout(\r\n      () => dispatch('search', $event.target.value),\r\n      500\r\n    );\r\n  }\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <div class=\"inner\">\r\n    <a href={backHref}>&lt;&nbsp;Back</a>\r\n    <input\r\n      {value}\r\n      type=\"search\"\r\n      placeholder=\"Filter on players (or try country=France)\"\r\n      on:input={handleSearch}\r\n    />\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .root {\r\n    background: var(--background-color);\r\n    padding: 1em;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 1;\r\n  }\r\n  .inner {\r\n    margin: 0 auto;\r\n    padding: 0 2em;\r\n    width: calc(100% - 1rem);\r\n    max-width: var(--max-body-width);\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n  }\r\n  .inner input {\r\n    margin-left: 1em;\r\n  }\r\n</style>",
    "<script>\r\n  import PlayerRow from '../molecules/PlayerRow.svelte';\r\n\r\n  export let players;\r\n  export let sort = 'rank';\r\n  let sortedPlayers;\r\n\r\n  $: {\r\n    if (sort === 'rank') {\r\n      sortedPlayers = sortByRank(players);\r\n    } else {\r\n      sortedPlayers = sortByAlphabetical(players);\r\n    }\r\n  }\r\n\r\n  const sortByAlphabetical = players => players.sort((a, b) => a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1);\r\n  const sortByRank = players => players.sort((a, b) => a.rank < b.rank ? -1 : 1);\r\n\r\n  function handleAlphabeticalSort() {\r\n    sortedPlayers = sortByAlphabetical(players);\r\n  }\r\n\r\n  function handleRankSort() {\r\n    sortedPlayers = sortByRank(players);\r\n  }\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <button on:click={handleAlphabeticalSort}>Alphabetical</button>\r\n  <button on:click={handleRankSort}>Rank</button>\r\n  <div class=\"players\">\r\n    {#each sortedPlayers as player}\r\n      <PlayerRow {...player} />\r\n    {/each}\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .players > :global(*) {\r\n    margin: .5em 0;\r\n  }\r\n</style>",
    "<script>\r\n  import QualifiersRow from '../molecules/QualifiersRow.svelte';\r\n\r\n  export let players;\r\n  export let maps;\r\n  export let filter;\r\n  let displayScores = true;\r\n\r\n  const playerScores = {};\r\n  const rankedPlayersPerMap = {};\r\n  let average = 0;\r\n  let nbScores = 0;\r\n  maps.forEach(map => {\r\n    rankedPlayersPerMap[map.beatmapId] = [];\r\n    // Compile player ranks and total scores\r\n    map.scores.forEach(score => {\r\n      // Ignore scores from non-tournament players\r\n      if (!players[score.userId]) return;\r\n      // The scores are already sorted beforehand,\r\n      // so the pushed player scores should also end up sorted for the map\r\n      if (!playerScores[score.userId]) {\r\n        playerScores[score.userId] = {\r\n          player: players[score.userId],\r\n          totalScore: 0,\r\n          scores: []\r\n        };\r\n      }\r\n      if (!rankedPlayersPerMap[map.beatmapId].includes(score.userId)) {\r\n        rankedPlayersPerMap[map.beatmapId].push(score.userId);\r\n      }\r\n      average += score.score;\r\n      playerScores[score.userId].scores.push(score);\r\n      playerScores[score.userId].totalScore += score.score;\r\n    });\r\n    nbScores += map.scores.length;\r\n  });\r\n  average /= nbScores;\r\n\r\n  // Tally ranks per map\r\n  Object.keys(playerScores).forEach(userId => {\r\n    playerScores[userId].ranks = [];\r\n    playerScores[userId].totalRank = 0;\r\n    // If a rank 0 is detected, remove the player from the seeding,\r\n    // as their qualifiers is incomplete and therefore invalid\r\n    let hasEmpty = false;\r\n    maps.forEach(map => {\r\n      if (hasEmpty) return;\r\n      const rank = rankedPlayersPerMap[map.beatmapId].indexOf(userId) + 1;\r\n      if (!rank) hasEmpty = true;\r\n      playerScores[userId].ranks.push(rank);\r\n      playerScores[userId].totalRank += rank;\r\n    });\r\n    if (hasEmpty) delete playerScores[userId];\r\n  });\r\n\r\n  const rankedPlayers = Object.values(playerScores)\r\n    .sort((a, b) => {\r\n      if (a.totalRank == b.totalRank) {\r\n        return a.totalScore < b.totalScore ? -1 : 1;\r\n      };\r\n      return a.totalRank < b.totalRank ? -1 : 1;\r\n    });\r\n\r\n  function handleToggle() {\r\n    displayScores = !displayScores;\r\n  }\r\n\r\n  function rowMatchesFilter(row, filter) {\r\n    if (!filter) return true;\r\n    let [, country] = filter.match(/country=(.*)/i) || [];\r\n    if (country) return row.player.country.toLowerCase().includes(country.toLowerCase());\r\n    return row.player.name.toLowerCase().includes(filter.toLowerCase());\r\n  }\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <div class=\"stats\">\r\n    <div class=\"average\">\r\n      Average score: <b>{average ? average.toFixed(0) : 'N/A'}</b>\r\n    </div>\r\n  </div>\r\n  <button on:click={handleToggle}>{displayScores ? 'Hide' : 'Show'} scores</button>\r\n  {#if displayScores}\r\n    <div class=\"scores\">\r\n      {#each rankedPlayers as row, i}\r\n        {#if rowMatchesFilter(row, filter)}\r\n          <QualifiersRow index={i+1} {...row} />\r\n        {/if}\r\n      {/each}\r\n    </div>\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  .scores {\r\n    margin-top: .5em;\r\n  }\r\n  .stats {\r\n    margin-bottom: 1em;\r\n  }\r\n</style>",
    "<script>\r\n  import RollRow from '../molecules/RollRow.svelte';\r\n\r\n  export let players;\r\n  export let rolls;\r\n  export let filter;\r\n  \r\n  let displayRolls = true;\r\n  let rollsArray = [];\r\n  let count = 0;\r\n  let sum = 0;\r\n  Object.keys(rolls).forEach(playerId => {\r\n    rolls[playerId].forEach(roll => {\r\n      ++count;\r\n      sum += roll;\r\n      rollsArray.push({\r\n        player: players[playerId],\r\n        value: roll\r\n      });\r\n    });\r\n  });\r\n  const average = (sum / count).toFixed(2);\r\n  rollsArray = rollsArray.sort((a, b) => a.value < b.value ? 1 : -1);\r\n  rollsArray.forEach((roll, i) => {\r\n    roll.index = i && rollsArray[i-1].value === roll.value ? rollsArray[i-1].index : i+1;\r\n  });\r\n  \r\n  function handleToggle() {\r\n    displayRolls = !displayRolls;\r\n  }\r\n\r\n  function rollMatchesFilter(roll, filter) {\r\n    if (!filter) return true;\r\n    let [, country] = filter.match(/country=(.*)/i) || [];\r\n    if (country) return roll.player.country.toLowerCase().includes(country.toLowerCase());\r\n    return roll.player.name.toLowerCase().includes(filter.toLowerCase());\r\n  }\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <button on:click={handleToggle}>{displayRolls ? 'Hide' : 'Show'} rolls</button>\r\n  {#if displayRolls}\r\n    <div class=\"rolls\">\r\n      {#each rollsArray as roll}\r\n        {#if rollMatchesFilter(roll, filter)}\r\n          <RollRow\r\n            index={roll.index}\r\n            player={roll.player}\r\n            roll={roll.value}\r\n          />\r\n        {/if}\r\n      {/each}\r\n    </div>\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  .rolls {\r\n    margin: 1em 0 2em;\r\n  }\r\n</style>",
    "<script>\r\n  import ScoreRow from '../molecules/ScoreRow.svelte';\r\n\r\n  export let players;\r\n  export let scores;\r\n  export let bans;\r\n  export let pickCount;\r\n  export let matchCount;\r\n  export let filter;\r\n  let groupScores = true;\r\n  let displayScores = true;\r\n\r\n  const playerScores = {};\r\n  const rankedPlayers = [];\r\n  let average = 0;\r\n  scores.forEach(score => {\r\n    // Ignore scores from non-tournament players\r\n    if (!players[score.userId]) return;\r\n    // The scores are already sorted beforehand,\r\n    // so the pushed player scores should also end up sorted\r\n    if (!playerScores[score.userId]) {\r\n      playerScores[score.userId] = [];\r\n      rankedPlayers.push({\r\n        player: players[score.userId],\r\n        // This is the reference to the array,\r\n        // so we can just keep using the map to look for players below.\r\n        scores: playerScores[score.userId]\r\n      });\r\n    }\r\n    average += score.score;\r\n    playerScores[score.userId].push(score);\r\n  });\r\n  average /= scores.length;\r\n\r\n  // Group bans\r\n  const groupedBans = {};\r\n  if (bans) {\r\n    bans.forEach(playerId => {\r\n      if (!players[playerId]) return;\r\n      if (!groupedBans[playerId]) groupedBans[playerId] = 0;\r\n      ++groupedBans[playerId];\r\n    });\r\n  }\r\n\r\n  function handleGroup() {\r\n    groupScores = !groupScores;\r\n  }\r\n\r\n  function handleToggle() {\r\n    displayScores = !displayScores;\r\n  }\r\n  \r\n  function playerMatchesFilter(player, filter) {\r\n    if (!filter) return true;\r\n    let [, country] = filter.match(/country=(.*)/i) || [];\r\n    if (country) return player.country.toLowerCase().includes(country.toLowerCase());\r\n    return player.name.toLowerCase().includes(filter.toLowerCase());\r\n  }\r\n</script>\r\n\r\n<div class=\"root\">\r\n  <div class=\"stats\">\r\n    <div class=\"average\">\r\n      Average score: <b>{average ? average.toFixed(0) : 'N/A'}</b>\r\n    </div>\r\n    {#if bans}\r\n      <div class=\"picks\">\r\n        Picked <b>{pickCount}/{matchCount}</b> ({(100 * pickCount / matchCount).toFixed(2)}%) times\r\n      </div>\r\n      <div class=\"bans\">\r\n        Banned <b>{bans.length}/{matchCount}</b>\r\n        ({(100 * bans.length / matchCount).toFixed(2)}%)\r\n        times{#if bans.length}{' by:'}{/if}\r\n        {#each Object.keys(groupedBans) as playerId, i}\r\n          {#if i},{/if}\r\n          <span class={filter && players[playerId].name.toLowerCase().includes(filter.toLowerCase()) && 'ban-highlighted'}>{\r\n            players[playerId].name\r\n            + (groupedBans[playerId] > 1 ? ` (${groupedBans[playerId]}x)` : '')\r\n          }</span>\r\n        {/each}\r\n      </div>\r\n      <div class=\"relevancy\">\r\n        Relevancy: <b>{bans.length + pickCount}/{matchCount}</b> ({(100 * (bans.length + pickCount) / matchCount).toFixed(2)}%)\r\n      </div>\r\n    {/if}\r\n  </div>\r\n  <button on:click={handleToggle}>{displayScores ? 'Hide' : 'Show'} scores</button>\r\n  <button on:click={handleGroup}>{groupScores ? 'Show all player scores' : 'Only best scores'}</button>\r\n  {#if displayScores}\r\n    <div class=\"scores\">\r\n      {#if groupScores}\r\n        {#each rankedPlayers as { player, scores }, i}\r\n          {#if playerMatchesFilter(player, filter)}\r\n            <ScoreRow index={i+1} player={player} {...scores[0]} />\r\n          {/if}\r\n        {/each}\r\n      {:else}\r\n        {#each scores as score, i}\r\n          {#if players[score.userId] && playerMatchesFilter(players[score.userId], filter)}\r\n            <ScoreRow index={i+1} player={players[score.userId]} {...score} />\r\n          {/if}\r\n        {/each}\r\n      {/if}\r\n    </div>\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  .scores {\r\n    margin-top: .5em;\r\n  }\r\n  .stats {\r\n    margin-bottom: 1em;\r\n  }\r\n  .ban-highlighted {\r\n    text-decoration: underline;\r\n    color: #ffb300;\r\n    font-weight: bold;\r\n  }\r\n</style>",
    "<script>\r\n  import { onMount } from 'svelte';\r\n  import { tournament, stage } from '../stores';\r\n  import Header from '../components/organisms/Header.svelte';\r\n  import RollList from '../components/organisms/RollList.svelte';\r\n  import QualifiersList from '../components/organisms/QualifiersList.svelte';\r\n  import ScoreList from '../components/organisms/ScoreList.svelte';\r\n  import MapCard from '../components/molecules/MapCard.svelte';\r\n\r\n  export let id;\r\n  export let tournamentId;\r\n  export let query;\r\n  let loading = true;\r\n  let filter = query || null;\r\n\r\n  function handleSearch(event) {\r\n    filter = event.detail;\r\n    location.hash = location.hash.split('?')[0] + (filter ? `?q=${filter}` : '');\r\n  }\r\n\r\n  onMount(async () => {\r\n    if (!$tournament || $tournament.id != tournamentId) {\r\n      try {\r\n        tournament.set(null);\r\n        stage.set(null);\r\n        const res1 = await fetch(`data/${tournamentId}.json`);\r\n        tournament.set(await res1.json());\r\n        const res2 = await fetch(`data/${tournamentId}.${id}.json`);\r\n        stage.set(await res2.json());\r\n      } catch {\r\n        location.hash = '';\r\n      }\r\n    }\r\n    if (!$stage || $stage.id != id) {\r\n      try {\r\n        stage.set(null);\r\n        const res = await fetch(`data/${tournamentId}.${id}.json`);\r\n        stage.set(await res.json());\r\n      } catch {\r\n        location.hash = `#/tournaments/${tournamentId}`;\r\n      }\r\n    }\r\n    loading = false;\r\n  });\r\n</script>\r\n\r\n<main>\r\n  {#if !loading}\r\n    <Header initialValue={query} backHref={`#/tournaments/${tournamentId}`} on:search={handleSearch} />\r\n    <h1>{$stage.name}</h1>\r\n    {#if $stage.rolls}\r\n      <h2>Rolls</h2>\r\n      <RollList\r\n        rolls={$stage.rolls}\r\n        players={$tournament.players}\r\n        {filter}\r\n      />\r\n    {/if}\r\n    {#if $stage.qualifiers}\r\n      <h2>Seeding</h2>\r\n      <QualifiersList\r\n        players={$tournament.players}\r\n        maps={$stage.maps}\r\n        {filter}\r\n      />\r\n    {/if}\r\n    <h2>{$stage.maps.length} maps</h2>\r\n    <div class=\"maps\">\r\n      {#each $stage.maps as map (map.beatmapId)}\r\n        <div class=\"map\">\r\n          <MapCard {...map} />\r\n          <ScoreList\r\n            players={$tournament.players}\r\n            scores={map.scores}\r\n            bans={map.bans}\r\n            pickCount={map.pickCount}\r\n            matchCount={$stage.matchCount}\r\n            {filter}\r\n          />\r\n        </div>\r\n      {/each}\r\n    </div>\r\n  {:else}\r\n    <p>Loading tournament data...</p>\r\n  {/if}\r\n</main>\r\n\r\n<style>\r\n  main {\r\n    padding-top: 1em;\r\n    margin: 2em;\r\n  }\r\n  .map {\r\n    margin: 1em 0 3em;\r\n  }\r\n  .map > :global(*) {\r\n    margin: 1em 0;\r\n  }\r\n</style>",
    "<script>\r\n  import { onMount } from 'svelte';\r\n  import { tournament } from '../stores';\r\n  import Header from '../components/organisms/Header.svelte';\r\n  import PlayerList from '../components/organisms/PlayerList.svelte';\r\n  import StageRow from '../components/molecules/StageRow.svelte';\r\n\r\n  export let id;\r\n  export let query;\r\n  let playerValues;\r\n  let displayPlayers;\r\n  let loading = true;\r\n\r\n  function handleSearch(event) {\r\n    const text = event.detail;\r\n    if (!text) displayPlayers = playerValues;\r\n    else {\r\n      let [, country] = text.match(/country=(.*)/i) || [];\r\n      if (country) {\r\n        displayPlayers = playerValues.filter(\r\n          player => player.country.toLowerCase().includes(text.toLowerCase())\r\n        );\r\n      } else {\r\n        displayPlayers = playerValues.filter(\r\n          player => player.name.toLowerCase().includes(text.toLowerCase())\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  onMount(async () => {\r\n    if (!$tournament || $tournament.id != id) {\r\n      try {\r\n        tournament.set(null);\r\n        const res = await fetch(`data/${id}.json`);\r\n        tournament.set(await res.json());\r\n      } catch {\r\n        location.hash = '';\r\n      }\r\n    }\r\n    playerValues = Object.values($tournament.players);\r\n    displayPlayers = playerValues;\r\n    if (query) handleSearch(query);\r\n    loading = false;\r\n  });\r\n</script>\r\n\r\n<main>\r\n  {#if !loading}\r\n    <Header backHref=\"#/\" on:search={handleSearch} />\r\n    <h1>{$tournament.name}</h1>\r\n    <h2>{$tournament.stages.length} stages</h2>\r\n    <div class=\"stages\">\r\n      {#each $tournament.stages as stage}\r\n        <StageRow {...stage} href={`#/tournaments/${id}/stages/${stage.id}`} />\r\n      {/each}\r\n    </div>\r\n    <h2>{Object.keys($tournament.players).length} players</h2>\r\n    <div class=\"players\">\r\n      <PlayerList players={displayPlayers} />\r\n    </div>\r\n  {:else}\r\n    <p>Loading tournament data...</p>\r\n  {/if}\r\n</main>\r\n\r\n<style>\r\n  main {\r\n    padding-top: 1em;\r\n    margin: 2em;\r\n  }\r\n  .stages {\r\n    margin-bottom: 2em;\r\n  }\r\n  .stages > :global(*) {\r\n    margin: 1em 0;\r\n  }\r\n</style>",
    "<script>\r\n  import { onMount } from 'svelte';\r\n  import { tournaments } from '../stores';\r\n  import TournamentRow from '../components/molecules/TournamentRow.svelte';\r\n\r\n  onMount(async () => {\r\n    if (!$tournaments.length) {\r\n      const res = await fetch('data/tournaments.json');\r\n      tournaments.set(await res.json());\r\n    }\r\n  });\r\n</script>\r\n\r\n<main>\r\n  <h1>Welcome!</h1>\r\n  <p>Below are the available tournaments</p>\r\n  <div class=\"tournaments\">\r\n    {#each $tournaments as tournament}\r\n      <TournamentRow {...tournament} />\r\n    {:else}\r\n      <p>Loading tournaments...</p>\r\n    {/each}\r\n  </div>\r\n</main>\r\n\r\n<style>\r\n  main {\r\n    margin: 2em;\r\n  }\r\n  .tournaments > :global(*) {\r\n    margin: 1em 0;\r\n  }\r\n</style>"
  ],
  "names": [],
  "mappings": "AAuCE,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,CAC9B,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CAC7B,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,CACvB,SAAS,CAAE,KAAK,AAClB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,IAAI,CAAE,CAAC,AACT,CAAC,AACD,SAAS,cAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,CAAC,CACT,IAAI,CAAE,CAAC,CACP,cAAc,CAAE,SAAS,AAC3B,CAAC,AACD,OAAO,cAAC,CAAC,AACP,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,SAAS,cAAC,CAAC,AACT,QAAQ,CAAE,OAAO,AACnB,CAAC,AACD,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,IAAI,AACf,CAAC,AACH,CAAC;ACpDD,KAAK,4BAAC,CAAC,AACL,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC/B,CAAC,AACD,OAAO,4BAAC,CAAC,AACP,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,GAAG,AACnB,CAAC,AACD,qBAAO,CAAC,GAAG,cAAC,CAAC,AACX,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,SAAS,CAAE,KAAK,CAChB,IAAI,CAAE,CAAC,AACT,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,KAAK,AACnB,CAAC;ACxBD,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC/B,CAAC,AACD,KAAK,eAAC,CAAC,AACL,SAAS,CAAE,KAAK,CAChB,IAAI,CAAE,CAAC,AACT,CAAC,AACD,KAAK,eAAC,CAAC,AACL,WAAW,CAAE,GAAG,CAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,QAAQ,AACvB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,KAAK,eAAC,CAAC,AACL,cAAc,CAAE,MAAM,AACxB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,KAAK,CAAE,CAAC,CACR,WAAW,CAAE,MAAM,AACrB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,KAAK,CAAE,CAAC,CACR,UAAU,CAAE,MAAM,AACpB,CAAC,AACH,CAAC;AC/CD,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC/B,CAAC,AACD,KAAK,cAAC,CAAC,AACL,SAAS,CAAE,KAAK,CAChB,IAAI,CAAE,CAAC,AACT,CAAC,AACD,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,KAAK,AACnB,CAAC;ACOD,KAAK,4BAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC/B,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,SAAS,CAAE,KAAK,CAChB,IAAI,CAAE,CAAC,AACT,CAAC,AACD,mBAAK,CAAC,KAAK,cAAC,CAAC,AACX,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,WAAW,CAAE,GAAG,CAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,QAAQ,AACvB,CAAC,AACD,MAAM,4BAAC,CAAC,AACN,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,OAAO,4BAAC,CAAC,AACP,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,KAAK,4BAAC,CAAC,AACL,cAAc,CAAE,MAAM,AACxB,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,KAAK,CAAE,CAAC,CACR,WAAW,CAAE,MAAM,AACrB,CAAC,AACD,MAAM,4BAAC,CAAC,AACN,KAAK,CAAE,CAAC,CACR,UAAU,CAAE,MAAM,AACpB,CAAC,AACH,CAAC;AClED,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,aAAa,CAC9B,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC/B,CAAC,AACD,KAAK,cAAC,CAAC,AACL,SAAS,CAAE,KAAK,AAClB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,WAAW,CAAE,GAAG,AAClB,CAAC;ACbD,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,aAAa,CAC9B,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC/B,CAAC,AACD,KAAK,eAAC,CAAC,AACL,SAAS,CAAE,KAAK,AAClB,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,WAAW,CAAE,GAAG,AAClB,CAAC;ACID,KAAK,4BAAC,CAAC,AACL,UAAU,CAAE,IAAI,kBAAkB,CAAC,CACnC,OAAO,CAAE,GAAG,CACZ,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,MAAM,4BAAC,CAAC,AACN,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,CAAC,CAAC,GAAG,CACd,KAAK,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CACxB,SAAS,CAAE,IAAI,gBAAgB,CAAC,CAChC,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,AACrB,CAAC,AACD,oBAAM,CAAC,KAAK,cAAC,CAAC,AACZ,WAAW,CAAE,GAAG,AAClB,CAAC;ACfD,sBAAQ,CAAW,CAAC,AAAE,CAAC,AACrB,MAAM,CAAE,IAAI,CAAC,CAAC,AAChB,CAAC;ACsDD,OAAO,eAAC,CAAC,AACP,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,aAAa,CAAE,GAAG,AACpB,CAAC;AC1CD,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,CAAC,CAAC,GAAG,AACnB,CAAC;ACiDD,OAAO,eAAC,CAAC,AACP,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,gBAAgB,eAAC,CAAC,AAChB,eAAe,CAAE,SAAS,CAC1B,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,IAAI,AACnB,CAAC;AC9BD,IAAI,cAAC,CAAC,AACJ,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,GAAG,AACb,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,MAAM,CAAE,GAAG,CAAC,CAAC,CAAC,GAAG,AACnB,CAAC,AACD,kBAAI,CAAW,CAAC,AAAE,CAAC,AACjB,MAAM,CAAE,GAAG,CAAC,CAAC,AACf,CAAC;AC9BD,IAAI,cAAC,CAAC,AACJ,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,GAAG,AACb,CAAC,AACD,OAAO,cAAC,CAAC,AACP,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,qBAAO,CAAW,CAAC,AAAE,CAAC,AACpB,MAAM,CAAE,GAAG,CAAC,CAAC,AACf,CAAC;AClDD,IAAI,cAAC,CAAC,AACJ,MAAM,CAAE,GAAG,AACb,CAAC,AACD,0BAAY,CAAW,CAAC,AAAE,CAAC,AACzB,MAAM,CAAE,GAAG,CAAC,CAAC,AACf,CAAC"
}